---
export interface Props {
  href: string;
  title: string;
  description?: string;
  image?: string;
  domain?: string;
  external?: boolean;
}

const { 
  href, 
  title, 
  description, 
  image, 
  domain,
  external = false 
} = Astro.props;

// ドメインを自動抽出（指定されていない場合）
const extractedDomain = domain || (() => {
  try {
    const url = new URL(href);
    return url.hostname.replace('www.', '');
  } catch {
    return href;
  }
})();

// 外部リンクかどうかを自動判定
const isExternal = external || (!href.startsWith('/') && !href.startsWith('#'));
---

<div class="link-card">
  <a 
    href={href}
    class="block group no-underline hover:no-underline"
    target={isExternal ? "_blank" : undefined}
    rel={isExternal ? "noopener noreferrer" : undefined}
  >
    <div class="flex bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden hover:border-blue-300 dark:hover:border-blue-600 hover:shadow-md transition-all duration-200 group-hover:translate-y-[-1px]">
      
      <!-- 画像部分 -->
      {image && (
        <div class="flex-shrink-0 w-24 h-24 sm:w-32 sm:h-24">
          <img 
            src={image} 
            alt={title}
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </div>
      )}
      
      <!-- コンテンツ部分 -->
      <div class="flex-1 p-4 min-w-0">
        <!-- タイトル -->
        <h3 class="text-base font-semibold text-gray-900 dark:text-white mb-1 line-clamp-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
          {title}
        </h3>
        
        <!-- 説明文 -->
        {description && (
          <p class="text-sm text-gray-600 dark:text-gray-400 mb-2 line-clamp-2">
            {description}
          </p>
        )}
        
        <!-- ドメイン表示 -->
        <div class="flex items-center text-xs text-gray-500 dark:text-gray-500">
          {isExternal && (
            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
            </svg>
          )}
          <span class="truncate">{extractedDomain}</span>
        </div>
      </div>
      
      <!-- 矢印アイコン -->
      <div class="flex items-center pr-4">
        <svg class="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </div>
    </div>
  </a>
</div>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* プロースタイルのオーバーライド */
  .link-card a {
    text-decoration: none !important;
    color: inherit !important;
  }
  
  .link-card a:hover {
    text-decoration: none !important;
  }
</style>