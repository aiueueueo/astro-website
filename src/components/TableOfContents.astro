---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// h2とh3のみを表示
const filteredHeadings = headings.filter(h => h.depth >= 2 && h.depth <= 3);
---

{filteredHeadings.length > 0 && (
  <div class="toc-container">
    <div class="toc-sticky">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
          目次
        </h3>
        <div class="text-xs text-gray-500 dark:text-gray-400">
          <span id="reading-progress">0%</span>
        </div>
      </div>
      
      <!-- 進捗バー -->
      <div class="mb-4">
        <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-1.5">
          <div 
            id="progress-bar" 
            class="bg-blue-600 dark:bg-blue-400 h-1.5 rounded-full transition-all duration-300 ease-out"
            style="width: 0%"
          ></div>
        </div>
      </div>
      
      <nav class="toc-nav">
        <ul class="space-y-1">
          {filteredHeadings.map((heading) => (
            <li>
              <a 
                href={`#${heading.slug}`}
                data-heading-id={heading.slug}
                class={`block text-sm hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-200 rounded px-3 py-2 border-l-2 border-transparent ${
                  heading.depth === 2 
                    ? 'text-gray-700 dark:text-gray-300 font-medium' 
                    : 'text-gray-600 dark:text-gray-400 ml-4'
                }`}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>
  </div>
)}


<style>
  .toc-container {
    @apply w-64 flex-shrink-0;
  }
  
  .toc-sticky {
    @apply sticky bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm;
    top: 6rem;
    max-height: calc(100vh - 8rem);
    overflow-y: auto;
  }
  
  .toc-nav ul {
    @apply list-none p-0 m-0;
  }
  
  .toc-nav a {
    @apply no-underline;
    line-height: 1.4;
  }
  
  .toc-nav a:hover {
    @apply underline;
  }
  
  /* モバイルでは非表示 */
  @media (max-width: 1024px) {
    .toc-container {
      @apply hidden;
    }
  }
</style>

<script>
  function initTableOfContents() {
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('reading-progress');
    const tocLinks = document.querySelectorAll('.toc-nav a');
    const headings = document.querySelectorAll('h2, h3');
    
    if (!progressBar || !progressText || !headings.length) return;

    function updateProgress() {
      // 記事の進捗計算
      const article = document.querySelector('article');
      if (!article) return;
      
      const articleRect = article.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      const documentHeight = article.offsetHeight;
      
      // 記事が短い場合の処理
      if (documentHeight <= windowHeight) {
        // 記事全体が画面に収まる場合は100%とする
        progressBar.style.width = '100%';
        progressText.textContent = '100%';
        return;
      }
      
      // 記事の上端がビューポートの上部に達したときから計算開始
      const scrolled = Math.max(0, -articleRect.top);
      const maxScroll = Math.max(1, documentHeight - windowHeight + 100); // 100px余裕、最小値1で除算エラー防止
      
      let progress = (scrolled / maxScroll) * 100;
      
      // NaN チェックと範囲制限
      if (isNaN(progress) || !isFinite(progress)) {
        progress = 0;
      }
      progress = Math.min(100, Math.max(0, progress));
      
      progressBar.style.width = `${progress}%`;
      progressText.textContent = `${Math.round(progress)}%`;
    }

    function updateActiveHeading() {
      let activeHeading = null;
      let closestDistance = Infinity;
      
      headings.forEach((heading) => {
        const rect = heading.getBoundingClientRect();
        const distance = Math.abs(rect.top - 100); // 100px from top as threshold
        
        if (rect.top <= 150 && distance < closestDistance) {
          activeHeading = heading;
          closestDistance = distance;
        }
      });
      
      // すべてのリンクからactiveクラスを削除
      tocLinks.forEach((link) => {
        link.classList.remove('active');
      });
      
      // アクティブな見出しに対応するリンクをハイライト
      if (activeHeading) {
        const activeLink = document.querySelector(`.toc-nav a[data-heading-id="${activeHeading.id}"]`);
        if (activeLink) {
          activeLink.classList.add('active');
        }
      }
    }

    function handleScroll() {
      updateProgress();
      updateActiveHeading();
    }

    // スムーズスクロール
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const offsetTop = targetElement.offsetTop - 80; // ヘッダー分のオフセット
          window.scrollTo({
            top: offsetTop,
            behavior: 'smooth'
          });
        }
      });
    });

    // イベントリスナー設定
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', updateProgress, { passive: true });
    
    // 初期化実行
    handleScroll();
  }

  // DOMが読み込まれた後に実行
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTableOfContents);
  } else {
    initTableOfContents();
  }
</script>

<style is:global>
  .toc-nav a.active {
    @apply text-blue-600 dark:text-blue-400 font-semibold bg-blue-50 dark:bg-blue-900/20 border-l-blue-600 dark:border-l-blue-400;
  }
  
  .toc-nav a:hover {
    @apply bg-gray-50 dark:bg-gray-700/50;
  }
</style>