---
// 検索ボックスコンポーネント
---

<div class="relative">
  <button
    id="search-toggle"
    class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
    aria-label="Open search"
  >
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>
  </button>

  <!-- Search Modal/Dropdown -->
  <div
    id="search-modal"
    class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 md:absolute md:top-full md:right-0 md:bg-transparent md:w-80"
  >
    <div class="absolute inset-x-4 top-20 md:top-2 md:inset-x-0 bg-white dark:bg-gray-900 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700">
      <div class="p-4">
        <div class="relative">
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          <input
            id="search-input"
            type="text"
            placeholder="記事を検索..."
            class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
          <button
            id="search-close"
            class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Search Results -->
        <div id="search-results" class="mt-4 max-h-64 overflow-y-auto">
          <p class="text-gray-500 dark:text-gray-400 text-sm text-center py-4">
            キーワードを入力して検索してください
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  function initSearch() {
    const searchToggle = document.getElementById('search-toggle');
    const searchModal = document.getElementById('search-modal');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchClose = document.getElementById('search-close');
    const searchResults = document.getElementById('search-results');

    if (!searchToggle || !searchModal || !searchInput || !searchClose || !searchResults) return;

    let articles: any[] = [];

    // Load articles data (this would typically come from a data source)
    async function loadArticles() {
      try {
        // In a real implementation, this would fetch from an API or static data
        // For now, we'll just show a placeholder
        articles = [];
      } catch (error) {
        console.error('Failed to load articles:', error);
      }
    }

    function openSearch() {
      searchModal.classList.remove('hidden');
      searchInput.focus();
    }

    function closeSearch() {
      searchModal.classList.add('hidden');
      searchInput.value = '';
      searchResults.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-sm text-center py-4">キーワードを入力して検索してください</p>';
    }

    function performSearch(query: string) {
      if (!query.trim()) {
        searchResults.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-sm text-center py-4">キーワードを入力して検索してください</p>';
        return;
      }

      // Filter articles based on query
      const filteredArticles = articles.filter(article =>
        article.title.toLowerCase().includes(query.toLowerCase()) ||
        article.description.toLowerCase().includes(query.toLowerCase()) ||
        article.tags?.some((tag: string) => tag.toLowerCase().includes(query.toLowerCase()))
      );

      if (filteredArticles.length === 0) {
        searchResults.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-sm text-center py-4">該当する記事が見つかりませんでした</p>';
        return;
      }

      // Display results
      searchResults.innerHTML = filteredArticles
        .slice(0, 5) // Show max 5 results
        .map(article => `
          <a href="/blog/${article.slug}/" class="block p-3 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-lg transition-colors">
            <h3 class="font-medium text-gray-900 dark:text-white text-sm">${article.title}</h3>
            <p class="text-gray-600 dark:text-gray-400 text-xs mt-1 line-clamp-2">${article.description}</p>
            <div class="flex gap-1 mt-2">
              ${article.tags?.slice(0, 3).map((tag: string) => `
                <span class="text-xs px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full">${tag}</span>
              `).join('') || ''}
            </div>
          </a>
        `).join('');
    }

    // Event listeners
    searchToggle.addEventListener('click', openSearch);
    searchClose.addEventListener('click', closeSearch);

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !searchModal.classList.contains('hidden')) {
        closeSearch();
      }
    });

    // Close on background click
    searchModal.addEventListener('click', (e) => {
      if (e.target === searchModal) {
        closeSearch();
      }
    });

    // Search input handler
    let debounceTimer: NodeJS.Timeout;
    searchInput.addEventListener('input', (e) => {
      clearTimeout(debounceTimer);
      debounceTimer = setTimeout(() => {
        performSearch((e.target as HTMLInputElement).value);
      }, 300);
    });

    // Load articles on initialization
    loadArticles();
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initSearch);
  
  // Re-initialize on navigation
  document.addEventListener('astro:page-load', initSearch);
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>