---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/layout/Header.astro';
import Footer from '../../components/layout/Footer.astro';
import ArticleCard from '../../components/blog/ArticleCard.astro';
import { getCollection } from 'astro:content';
import '../../styles/global.css';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const publishedPosts = allPosts.filter(post => !post.data.draft);
  
  // 全てのタグを収集
  const allTags = new Set<string>();
  publishedPosts.forEach(post => {
    post.data.tags.forEach(tag => {
      allTags.add(tag);
    });
  });
  
  // 各タグに対してパスを生成
  return Array.from(allTags).map(tag => ({
    params: { 
      tag: tag.toLowerCase().replace(/\s+/g, '-')
    },
    props: { 
      originalTag: tag
    }
  }));
}

const { tag } = Astro.params;
const { originalTag } = Astro.props;

// 指定されたタグの記事を取得
const allPosts = await getCollection('blog');
const taggedPosts = allPosts
  .filter(post => !post.data.draft)
  .filter(post => post.data.tags.includes(originalTag))
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const articles = taggedPosts.map(post => ({
  title: post.data.title,
  description: post.data.description,
  image: post.data.heroImage || "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=300&fit=crop",
  tags: post.data.tags,
  date: post.data.pubDate.toISOString().split('T')[0],
  slug: post.slug
}));

// 関連タグを取得（同じ記事に含まれる他のタグ）
const relatedTags = new Map<string, number>();
taggedPosts.forEach(post => {
  post.data.tags.forEach(t => {
    if (t !== originalTag) {
      relatedTags.set(t, (relatedTags.get(t) || 0) + 1);
    }
  });
});

const sortedRelatedTags = Array.from(relatedTags.entries())
  .sort((a, b) => b[1] - a[1])
  .slice(0, 5)
  .map(([tag]) => tag);

// タグの色を生成
function getTagColor(tagName: string) {
  const colors = [
    'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
    'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
    'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300'
  ];
  
  let hash = 0;
  for (let i = 0; i < tagName.length; i++) {
    hash = ((hash << 5) - hash + tagName.charCodeAt(i)) & 0xffffffff;
  }
  
  return colors[Math.abs(hash) % colors.length];
}
---

<Layout 
  title={`${originalTag} - Tag Articles`} 
  description={`${originalTag}に関する記事一覧`}
>
  <Header currentPage="tags" />
  
  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <nav class="mb-6">
      <ol class="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
        <li><a href="/" class="hover:text-blue-600 dark:hover:text-blue-400">Home</a></li>
        <li>›</li>
        <li><a href="/tags" class="hover:text-blue-600 dark:hover:text-blue-400">Tags</a></li>
        <li>›</li>
        <li class="text-gray-900 dark:text-white font-medium">{originalTag}</li>
      </ol>
    </nav>

    <!-- Tag Header -->
    <div class="mb-8">
      <div class="flex items-center gap-3 mb-4">
        <span class={`inline-block px-4 py-2 rounded-full text-lg font-medium ${getTagColor(originalTag)}`}>
          {originalTag}
        </span>
        <span class="text-gray-500 dark:text-gray-400">
          {articles.length} {articles.length === 1 ? 'article' : 'articles'}
        </span>
      </div>
      <p class="text-gray-600 dark:text-gray-400">
        {originalTag}に関する記事一覧
      </p>
    </div>

    <!-- Articles Grid -->
    <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3 mb-12">
      {articles.map((article) => (
        <ArticleCard 
          title={article.title}
          description={article.description}
          image={article.image}
          tags={article.tags}
          date={article.date}
          slug={article.slug}
          compact={false}
        />
      ))}
    </div>

    {articles.length === 0 && (
      <div class="text-center py-12">
        <div class="text-gray-400 dark:text-gray-600 mb-4">
          <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
          記事が見つかりませんでした
        </h3>
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          {originalTag}タグの記事はまだありません。
        </p>
        <a 
          href="/tags"
          class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          他のタグを見る
        </a>
      </div>
    )}

    <!-- Related Tags -->
    {sortedRelatedTags.length > 0 && (
      <div class="border-t border-gray-200 dark:border-gray-700 pt-8">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
          関連タグ
        </h2>
        <div class="flex flex-wrap gap-2">
          {sortedRelatedTags.map((relatedTag) => (
            <a 
              href={`/tags/${relatedTag.toLowerCase().replace(/\s+/g, '-')}`}
              class={`inline-block px-3 py-1 rounded-full text-sm hover:scale-105 transition-transform ${getTagColor(relatedTag)}`}
            >
              {relatedTag}
            </a>
          ))}
        </div>
      </div>
    )}
  </main>
  
  <Footer />
</Layout>