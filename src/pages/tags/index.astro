---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import Breadcrumb from '../../components/Breadcrumb.astro';
import { getCollection } from 'astro:content';
import '../../styles/global.css';

// 全ての記事からタグを収集
const allPosts = await getCollection('blog');
const publishedPosts = allPosts.filter(post => !post.data.draft);

// タグの使用回数を計算
const tagCounts = new Map<string, number>();
publishedPosts.forEach(post => {
  post.data.tags.forEach(tag => {
    tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);
  });
});

// タグを使用回数順でソート
const sortedTags = Array.from(tagCounts.entries())
  .sort((a, b) => b[1] - a[1])
  .map(([tag, count]) => ({ tag, count }));

// タグごとの色を生成（ハッシュベース）
function getTagColor(tag: string) {
  const colors = [
    'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300',
    'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300',
    'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300',
    'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300',
    'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300',
    'bg-indigo-100 text-indigo-800 dark:bg-indigo-900/30 dark:text-indigo-300',
    'bg-pink-100 text-pink-800 dark:bg-pink-900/30 dark:text-pink-300',
    'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-300'
  ];
  
  let hash = 0;
  for (let i = 0; i < tag.length; i++) {
    hash = ((hash << 5) - hash + tag.charCodeAt(i)) & 0xffffffff;
  }
  
  return colors[Math.abs(hash) % colors.length];
}
---

<Layout title="Tags - All Topics" description="ブログ記事のタグ一覧">
  <Header currentPage="tags" />
  
  <main class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <Breadcrumb 
      items={[
        { label: 'Home', href: '/' },
        { label: 'Tags' }
      ]} 
    />
    
    <!-- Page Title -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">
        Tags
      </h1>
      <p class="text-gray-600 dark:text-gray-400">
        記事をトピック別に探す
      </p>
    </div>


    <!-- Tag Cloud -->
    <div class="mb-8">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
        人気のタグ
      </h2>
      <div class="flex flex-wrap gap-3">
        {sortedTags.slice(0, 10).map(({ tag, count }) => (
          <a 
            href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
            class={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium hover:scale-105 transition-transform ${getTagColor(tag)}`}
          >
            {tag}
            <span class="ml-2 text-xs opacity-75">
              {count}
            </span>
          </a>
        ))}
      </div>
    </div>

    <!-- Search and Filter -->
    <div class="mb-6">
      <div class="flex flex-col md:flex-row gap-4 mb-4">
        <!-- Search Input -->
        <div class="flex-1">
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              id="tag-search"
              placeholder="タグを検索..."
              class="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>
        
        <!-- Sort Options -->
        <div class="flex gap-2">
          <select
            id="sort-option"
            class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="count">使用回数順</option>
            <option value="name">アルファベット順</option>
          </select>
          
          <select
            id="min-count"
            class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="1">全て表示</option>
            <option value="2">2回以上</option>
            <option value="3">3回以上</option>
            <option value="5">5回以上</option>
          </select>
          
        </div>
      </div>
      
      <!-- Clear Filters -->
      <button
        id="clear-filters"
        class="text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 hidden"
      >
        フィルターをクリア
      </button>
    </div>

    <!-- All Tags -->
    <div>
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">
        全てのタグ
        <span id="tag-count" class="text-sm font-normal text-gray-500 dark:text-gray-400 ml-2">
          ({sortedTags.length}件)
        </span>
      </h2>
      
      <!-- No Results Message -->
      <div id="no-results" class="text-center py-8 hidden">
        <div class="text-gray-400 dark:text-gray-600 mb-2">
          <svg class="w-12 h-12 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <p class="text-gray-600 dark:text-gray-400">該当するタグが見つかりませんでした</p>
      </div>
      
      <div id="tags-grid" class="grid gap-3 md:grid-cols-2 lg:grid-cols-3">
        {sortedTags.map(({ tag, count }) => (
          <a 
            href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
            class="tag-item flex items-center justify-between p-3 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md hover:border-blue-300 dark:hover:border-blue-600 transition-all"
            data-tag={tag.toLowerCase()}
            data-count={count}
          >
            <span class="font-medium text-gray-900 dark:text-white">
              {tag}
            </span>
            <span class="text-sm text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
              {count} {count === 1 ? 'article' : 'articles'}
            </span>
          </a>
        ))}
      </div>
    </div>

    <!-- JavaScript for filtering -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.getElementById('tag-search');
        const sortSelect = document.getElementById('sort-option');
        const minCountSelect = document.getElementById('min-count');
        const clearButton = document.getElementById('clear-filters');
        const tagsGrid = document.getElementById('tags-grid');
        const tagCount = document.getElementById('tag-count');
        const noResults = document.getElementById('no-results');
        
        const allTagItems = Array.from(document.querySelectorAll('.tag-item'));
        
        function filterAndSort() {
          const searchTerm = searchInput.value.toLowerCase();
          const sortBy = sortSelect.value;
          const minCount = parseInt(minCountSelect.value);
          
          // Filter tags
          let filteredItems = allTagItems.filter(item => {
            const tag = item.dataset.tag;
            const count = parseInt(item.dataset.count);
            
            const matchesSearch = tag.includes(searchTerm);
            const matchesCount = count >= minCount;
            
            return matchesSearch && matchesCount;
          });
          
          // Sort tags
          filteredItems.sort((a, b) => {
            if (sortBy === 'name') {
              return a.dataset.tag.localeCompare(b.dataset.tag);
            } else {
              return parseInt(b.dataset.count) - parseInt(a.dataset.count);
            }
          });
          
          // Update display
          tagsGrid.innerHTML = '';
          
          if (filteredItems.length === 0) {
            noResults.classList.remove('hidden');
            tagsGrid.classList.add('hidden');
          } else {
            noResults.classList.add('hidden');
            tagsGrid.classList.remove('hidden');
            filteredItems.forEach(item => tagsGrid.appendChild(item.cloneNode(true)));
          }
          
          // Update count
          tagCount.textContent = `(${filteredItems.length}件)`;
          
          // Show/hide clear button (only for actual filters, not sorting)
          const hasFilters = searchTerm || minCount > 1;
          clearButton.classList.toggle('hidden', !hasFilters);
        }
        
        function clearFilters() {
          searchInput.value = '';
          sortSelect.value = 'count';
          minCountSelect.value = '1';
          filterAndSort();
        }
        
        // Event listeners
        searchInput.addEventListener('input', filterAndSort);
        sortSelect.addEventListener('change', filterAndSort);
        minCountSelect.addEventListener('change', filterAndSort);
        clearButton.addEventListener('click', clearFilters);
        
        // Initialize
        filterAndSort();
      });
    </script>
  </main>
  
  <Footer />
</Layout>