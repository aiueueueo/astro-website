---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ArticleCard from '../components/ArticleCard.astro';
import Breadcrumb from '../components/Breadcrumb.astro';
import { getCollection } from 'astro:content';
import '../styles/global.css';

// 全ての公開記事を取得
const allPosts = await getCollection('blog');
const publishedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const articles = publishedPosts.map(post => ({
  title: post.data.title,
  description: post.data.description,
  image: post.data.heroImage || "https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=400&h=300&fit=crop",
  tags: post.data.tags,
  date: post.data.pubDate.toISOString().split('T')[0],
  slug: post.slug,
  content: post.body // 検索用のコンテンツ
}));
---

<Layout title="Search - Blog" description="ブログ記事を検索">
  <Header currentPage="search" />
  
  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Breadcrumb -->
    <Breadcrumb 
      items={[
        { label: 'Home', href: '/' },
        { label: 'Search' }
      ]} 
    />
    
    <!-- Search Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
        記事を検索
      </h1>
      
      <!-- Search Input -->
      <div class="relative max-w-2xl">
        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
          <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input
          type="text"
          id="search-input"
          placeholder="タイトル、内容、タグで検索..."
          class="block w-full pl-12 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg"
        />
      </div>
      
      <!-- Search Stats -->
      <div class="mt-4 text-sm text-gray-600 dark:text-gray-400">
        <span id="search-stats">全 {articles.length} 件の記事</span>
      </div>
    </div>

    <!-- Search Results -->
    <div id="search-results" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
      {articles.map((article) => (
        <ArticleCard 
          title={article.title}
          description={article.description}
          image={article.image}
          tags={article.tags}
          date={article.date}
          slug={article.slug}
          compact={false}
        />
      ))}
    </div>

    <!-- No Results -->
    <div id="no-results" class="text-center py-12 hidden">
      <div class="text-gray-400 dark:text-gray-600 mb-4">
        <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
        検索結果が見つかりませんでした
      </h3>
      <p class="text-gray-600 dark:text-gray-400 mb-4">
        別のキーワードで検索してみてください
      </p>
      <button
        id="clear-search"
        class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
      >
        検索をクリア
      </button>
    </div>
  </main>
  
  <Footer />
</Layout>

<!-- Search Data -->
<script define:vars={{ articles }}>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const noResults = document.getElementById('no-results');
    const searchStats = document.getElementById('search-stats');
    const clearButton = document.getElementById('clear-search');
    
    // URLパラメータから検索クエリを取得
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get('q') || '';
    
    if (initialQuery) {
      searchInput.value = initialQuery;
      performSearch(initialQuery);
    }
    
    function performSearch(query) {
      const searchTerm = query.toLowerCase().trim();
      
      if (!searchTerm) {
        showAllArticles();
        return;
      }
      
      // 記事をフィルタリング
      const filteredArticles = articles.filter(article => {
        const titleMatch = article.title.toLowerCase().includes(searchTerm);
        const descriptionMatch = article.description.toLowerCase().includes(searchTerm);
        const contentMatch = article.content.toLowerCase().includes(searchTerm);
        const tagMatch = article.tags.some(tag => tag.toLowerCase().includes(searchTerm));
        
        return titleMatch || descriptionMatch || contentMatch || tagMatch;
      });
      
      displayResults(filteredArticles, searchTerm);
    }
    
    function displayResults(results, query) {
      searchResults.innerHTML = '';
      
      if (results.length === 0) {
        searchResults.classList.add('hidden');
        noResults.classList.remove('hidden');
        searchStats.textContent = `「${query}」の検索結果: 0件`;
      } else {
        noResults.classList.add('hidden');
        searchResults.classList.remove('hidden');
        
        results.forEach(article => {
          const articleElement = createArticleElement(article);
          searchResults.appendChild(articleElement);
        });
        
        searchStats.textContent = `「${query}」の検索結果: ${results.length}件`;
      }
    }
    
    function createArticleElement(article) {
      const articleDiv = document.createElement('div');
      articleDiv.innerHTML = `
        <article class="group bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm hover:shadow-lg dark:shadow-gray-900/10 transition-all duration-200">
          <a href="/blog/${article.slug}/" class="block">
            <div class="aspect-[4/3] overflow-hidden">
              <img 
                src="${article.image}" 
                alt="${article.title}"
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-200"
                loading="lazy"
              />
            </div>
            
            <div class="p-6">
              <div class="text-sm text-gray-500 dark:text-gray-400 mb-3">
                ${new Date(article.date).toLocaleDateString('ja-JP', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric'
                })}
              </div>
              
              <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-3 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
                ${article.title}
              </h2>
              
              <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                ${article.description}
              </p>
              
              <div class="flex flex-wrap gap-2">
                ${article.tags.map(tag => `
                  <a 
                    href="/tags/${tag.toLowerCase().replace(/\\s+/g, '-')}/" 
                    class="inline-block text-xs text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
                    onclick="event.stopPropagation()"
                  >
                    #${tag}
                  </a>
                `).join('')}
              </div>
            </div>
          </a>
        </article>
      `;
      return articleDiv;
    }
    
    function showAllArticles() {
      displayResults(articles, '');
      searchStats.textContent = `全 ${articles.length} 件の記事`;
    }
    
    // イベントリスナー
    searchInput.addEventListener('input', (e) => {
      const query = e.target.value;
      performSearch(query);
      
      // URLを更新（履歴には追加しない）
      const newUrl = query 
        ? `${window.location.pathname}?q=${encodeURIComponent(query)}`
        : window.location.pathname;
      window.history.replaceState({}, '', newUrl);
    });
    
    clearButton.addEventListener('click', () => {
      searchInput.value = '';
      showAllArticles();
      window.history.replaceState({}, '', window.location.pathname);
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>