---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import RelatedArticles from '../../components/RelatedArticles.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import '../../styles/global.css';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content, headings } = await post.render();

function formatDate(date: Date) {
  return date.toLocaleDateString('ja-JP', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}
---

<Layout 
  title={post.data.title} 
  description={post.data.description}
  image={post.data.heroImage}
  article={true}
>
  <Header currentPage="blog" />
  
  <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Hero Section - Centered -->
    <div class="max-w-4xl mx-auto mb-8 flex justify-center">
      <div class="w-full max-w-3xl">
      <!-- Hero Image -->
      {post.data.heroImage && (
        <div class="flex justify-center mb-6">
          <div class="aspect-[16/9] max-h-96 overflow-hidden rounded-lg">
            <img 
              src={post.data.heroImage} 
              alt={post.data.title}
              class="w-full h-full object-cover"
            />
          </div>
        </div>
      )}
      
      <!-- Article Header -->
      <header>
        <!-- Back to Blog Link -->
        <div class="mb-4">
          <a 
            href="/blog/"
            class="inline-flex items-center text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
          >
            &lt; blogに戻る
          </a>
        </div>
        
        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white mb-4 text-left">
          {post.data.title}
        </h1>
        
        <div class="flex items-center justify-start gap-4 text-sm text-gray-600 dark:text-gray-400 mb-4">
          <span>
            作成日: <time datetime={post.data.pubDate.toISOString()}>
              {formatDate(post.data.pubDate)}
            </time>
          </span>
          {post.data.updatedDate && (
            <span>
              更新日: <time datetime={post.data.updatedDate.toISOString()}>
                {formatDate(post.data.updatedDate)}
              </time>
            </span>
          )}
        </div>
        
        <!-- Tags -->
        {post.data.tags.length > 0 && (
          <div class="flex flex-wrap justify-start gap-2">
            {post.data.tags.map((tag) => (
              <a 
                href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}/`}
                class="inline-block px-3 py-1 text-sm bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 rounded-full hover:bg-blue-200 dark:hover:bg-blue-900/50 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        )}
      </header>
      </div>
    </div>

    <!-- Content with TOC -->
    <div class="flex gap-8">
      <!-- Article Content -->
      <article class="flex-1 prose prose-lg max-w-none">
        <div class="prose dark:prose-invert max-w-none leading-relaxed">
          <Content />
        </div>
      </article>
      
      <!-- Table of Contents -->
      <TableOfContents headings={headings} />
    </div>
    
    <!-- Related Articles -->
    <RelatedArticles currentPost={post} maxResults={3} />
    
    <!-- Navigation -->
    <div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-center">
        <a 
          href="/blog/"
          class="inline-flex items-center text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 transition-colors"
        >
          ← すべての記事に戻る
        </a>
        
        <div class="flex gap-4">
          <button 
            onclick="navigator.share && navigator.share({title: document.title, url: window.location.href})"
            class="px-4 py-2 text-sm bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
          >
            シェア
          </button>
        </div>
      </div>
    </div>
  </main>
  
  <Footer />
</Layout>

<style>
  /* プログコードブロックのスタイリング */
  .prose :global(pre) {
    @apply bg-gray-900 dark:bg-gray-800 text-gray-100 rounded-lg p-4 overflow-x-auto;
  }
  
  .prose :global(code) {
    @apply bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 px-1 py-0.5 rounded text-sm;
  }
  
  .prose :global(pre code) {
    @apply bg-transparent text-gray-100 p-0;
  }
  
  /* 見出しデザイン */
  .prose :global(h1) {
    @apply text-3xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-4 pb-2 border-b-2 border-blue-600;
  }
  
  .prose :global(h2) {
    @apply text-2xl font-semibold text-gray-900 dark:text-gray-100 mt-8 mb-4 pb-2 border-b border-gray-300 dark:border-gray-600;
  }
  
  .prose :global(h3) {
    @apply text-xl font-semibold text-gray-800 dark:text-gray-200 mt-6 mb-3 pl-4 border-l-4 border-gray-400 dark:border-gray-500;
  }
  
  .prose :global(h4) {
    @apply text-lg font-medium text-gray-800 dark:text-gray-200 mt-6 mb-3;
  }
  
  .prose :global(h5) {
    @apply text-base font-medium text-gray-700 dark:text-gray-300 mt-4 mb-2;
  }
  
  .prose :global(h6) {
    @apply text-sm font-medium text-gray-600 dark:text-gray-400 mt-4 mb-2;
  }

  /* ダークモード対応 */
  :global(.dark) .prose {
    @apply text-gray-300;
  }
  
  :global(.dark) .prose :global(a) {
    @apply text-blue-400 hover:text-blue-300;
  }
  
  :global(.dark) .prose :global(blockquote) {
    @apply border-gray-600 text-gray-400;
  }
</style>